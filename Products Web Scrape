{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "6e61809c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                               Image   SKU Price  \\\n",
      "0  https://kooksheaders.com/imagecache/productLar...  None  None   \n",
      "1  https://kooksheaders.com/imagecache/productLar...  None  None   \n",
      "2  https://kooksheaders.com/imagecache/productLar...  None  None   \n",
      "3  https://kooksheaders.com/imagecache/productLar...  None  None   \n",
      "4  https://kooksheaders.com/imagecache/productLar...  None  None   \n",
      "\n",
      "                                                Body  \n",
      "0                                  3\" x 2-1/2\" SS...  \n",
      "1                                  3\" x 2-1/2\" SS...  \n",
      "2                                  3\" x 2-1/2\" SS...  \n",
      "3                                  3\" x 2-1/2\" SS...  \n",
      "4                                  3\" x 2-1/2\" SS...  \n"
     ]
    }
   ],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import pandas\n",
    "\n",
    "#empty list to store\n",
    "dataList=[]\n",
    "all_items_data = []\n",
    "all_prices_data = []\n",
    "img_urls = []\n",
    "\n",
    "def scrape_data_from_page(soup):\n",
    "    # Extract and process data from the current page.\n",
    "    items = soup.find_all(\"div\", {\"class\": \"product-name\"})\n",
    "    prices = soup.find_all(\"span\", {\"class\": \"price\"})\n",
    "    pics = soup.find_all('div', {'class': \"li-hold\"})\n",
    "    \n",
    "    all_items_data.extend(item.get_text() for item in items)\n",
    "    all_prices_data.extend(price.get_text() for price in prices)\n",
    "    \n",
    "\n",
    "#loop through pages - does NOT include last number\n",
    "for page in range(1, 10):\n",
    "\n",
    "    #request\n",
    "    showCount= str(64)\n",
    "    stringPage= str(page)\n",
    "    baseUrl = f'https://kooksheaders.com/competition?numPerPage={showCount}&resetPage={stringPage}&sort=catSort'\n",
    "    r = requests.get(baseUrl)\n",
    "    c = r.content\n",
    "    \n",
    "    #parse\n",
    "    soup=BeautifulSoup(c,\"html.parser\")\n",
    "    #print(soup.prettify())\n",
    "    #print(f\"Fetching data from page {page} using URL: {baseUrl}\")\n",
    "\n",
    "    #find all divs with specific class for name of item\n",
    "    #allItems=soup.find_all(\"div\",{\"class\":\"product-name\"})\n",
    "    #firstItem=allItems[0].text.strip()\n",
    "    #print(firstItem)\n",
    "\n",
    "    #find all spans with specific class for price\n",
    "    #allPrices=soup.find_all(\"span\",{\"class\":\"price\"})\n",
    "    #firstPrice=allPrices[0].text.strip()\n",
    "    #print(firstPrice)\n",
    "    \n",
    "    #allPics=soup.find_all('img')[1]\n",
    "    #pics = soup.find_all('div', {'class': \"li-hold\"})  # Use find_all to get all elements with the class \"li-hold\"\n",
    "    #img_urls = []\n",
    "    \n",
    "    scrape_data_from_page(soup)\n",
    "                        \n",
    "\n",
    "    \n",
    "    \n",
    "    #loop through all items and prices\n",
    "    \n",
    "    for i in range(0,int(showCount)):\n",
    "\n",
    "        #empty dictionary\n",
    "        d={}\n",
    "\n",
    "        #fill dictionary\n",
    "        #Body=(''.join(all_items_data[i].find('br').next_sibling))\n",
    "        \n",
    "        img = pics[i].find('img')['src']\n",
    "\n",
    "        img_urls.append(img)\n",
    "       \n",
    "            \n",
    "        #d[\"Body\"] =\n",
    "\n",
    "        #add try and except\n",
    "         \n",
    "            \n",
    "        try:\n",
    "            d[\"Image\"] =(\"https://kooksheaders.com\" +img)\n",
    "        except:\n",
    "            d[\"Image\"]= None\n",
    "            \n",
    "\n",
    "            \n",
    "        try:\n",
    "            d[\"SKU\"] =all_items_data[i].text.strip()[5:13]\n",
    "        except:\n",
    "            d[\"SKU\"] = None\n",
    "        \n",
    "        \n",
    "        try:\n",
    "            d[\"Price\"] = all_prices_data[i].text.strip()\n",
    "        except:\n",
    "            d[\"Price\"] = None\n",
    "            \n",
    "        try:\n",
    "            d[\"Body\"] =Body.replace('\\n', '').replace(\"/r\", \"\")\n",
    "        except:\n",
    "            d[\"Body\"]= None\n",
    "            \n",
    "\n",
    "\n",
    "        #append dictionary to list\n",
    "        dataList.append(d)\n",
    "\n",
    "\n",
    "#turn into data frame\n",
    "df = pandas.DataFrame(dataList)\n",
    "print(df.head())\n",
    "#print(df.describe())\n",
    "\n",
    "#make into csv\n",
    "df.to_csv(\"kooks.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9fb0b5f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdab9daf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2515fda2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ece15ea8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
